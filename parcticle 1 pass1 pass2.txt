Design suitable Data structures and implement Pass-I and Pass-II of a two-pass assembler for pseudo-machine. Implementation should consist of a few instructions from each category and few assembler directives. The output of Pass-I (intermediate code file and symbol table) should be input for Pass-II


package rushi12;

public class demo {

    public static void main(String[] args) {
        
        int i, lc = 0;
        
        String a[][] = {
            {"", "START", "101", ""},
            {"", "MOVER", "BREG", "ONE"},
            {"AGAIN", "MULT", "BREG", "TERM"},
            {"", "MOVER", "CREG", "TERM"},
            {"", "ADD", "CREG", "N"},
            {"", "MOVEM", "CREG", "TERM"},
            {"N", "DS", "2", ""},
            {"RESULT", "DS", "2", ""},
            {"ONE", "DC", "1", ""},
            {"TERM", "DS", "1", ""},
            {"", "END", "", ""}
        };

        // Initialize the symbol table
        String st[][] = new String[5][2];
        int cnt = 0;

        // Parse the starting address
        lc = Integer.parseInt(a[0][2]); // Location Counter starts at 101

        // Process each line in the input table
        for (i = 1; i < 11; i++) {
            // Check if there is a symbol in the first column
            if (!a[i][0].equals("")) {
                // Store symbol and current lc in the symbol table
                st[cnt][0] = a[i][0];
                st[cnt][1] = Integer.toString(lc);
                cnt++;
            }

            // Update location counter based on instruction type
            if (a[i][1].equals("DS")) {
                int d = Integer.parseInt(a[i][2]);
                lc += d;
            } else {
                lc++;
            }
        }

        // Print the symbol table
        System.out.println("Symbol Table:");
        for (i = 0; i < cnt; i++) {
            for (int j = 0; j < 2; j++) {
                System.out.print(st[i][j] + "\t");
            }
            System.out.println();
        }
    }
}
