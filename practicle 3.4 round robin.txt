package jeevan1;

import java.util.Scanner;


class jeevan {
    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        
        // Arrays to store burst times, remaining burst times, and waiting times
        int wtime[], btime[], rtime[], num, quantum, total;
        
        wtime = new int[10]; // Waiting times for processes
        btime = new int[10]; // Burst times for processes
        rtime = new int[10]; // Remaining burst times for processes
        
        // Input number of processes (maximum of 10)
        System.out.print("Enter number of processes (MAX 10): ");
        num = s.nextInt();
        
        // Input burst times for each process
        System.out.print("Enter burst time:\n");
        for (int i = 0; i < num; i++) {
            System.out.print("P[" + (i + 1) + "]: ");
            btime[i] = s.nextInt();
            rtime[i] = btime[i];  // Remaining burst time initially equals burst time
            wtime[i] = 0;         // Initialize waiting times to 0
        }

        // Input quantum time
        System.out.print("\nEnter quantum: ");
        quantum = s.nextInt();
        
        int rp = num;  // Remaining processes to be completed
        int i = 0;     // Index for processes
        int time = 0;  // Total time elapsed
        
        // Start printing the execution sequence
        System.out.print("Gantt Chart:\n0");
        
        // Round Robin scheduling loop
        while (rp > 0) {
            if (rtime[i] > quantum) {
                // Process still needs more time than the quantum
                rtime[i] -= quantum;   // Decrease remaining burst time
                time += quantum;       // Increment total time by quantum
                System.out.print(" | P[" + (i + 1) + "] | ");
            } else if (rtime[i] > 0) {
                // Process completes in this round
                time += rtime[i];      // Add remaining burst time to total time
                rtime[i] = 0;          // Mark process as completed
                rp--;                  // Decrease remaining processes count
                System.out.print(" | P[" + (i + 1) + "] | ");
            }
            
            // Print the current time after each process's execution
            System.out.print(time);
            
            // Move to the next process
            i++;
            if (i == num) {
                i = 0;  // Restart from the first process
            }
        }

        System.out.println(); // Print newline after Gantt Chart
        
        // Calculate the average waiting time
        int totalWaitTime = 0;
        for (int j = 0; j < num; j++) {
            totalWaitTime += wtime[j];  // Sum of waiting times
        }

        float avgWaitTime = (float) totalWaitTime / num;
        System.out.println("\nAverage Waiting Time: " + avgWaitTime);
        
        // Calculate the average turnaround time
        int totalTurnaroundTime = 0;
        for (int j = 0; j < num; j++) {
            totalTurnaroundTime += (wtime[j] + btime[j]);  // Turnaround time = wait time + burst time
        }

        float avgTurnaroundTime = (float) totalTurnaroundTime / num;
        System.out.println("Average Turnaround Time: " + avgTurnaroundTime);
    }
}
